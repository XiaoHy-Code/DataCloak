Soot started on Fri Jul 30 16:05:10 CST 2021
No main class given. Inferred 'test.Sort_Bubble' as main class.
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[cf]SooClass:invoker.sgx_invoker
[cf]SooClass:test.Sort_Bubble
[cf] class: test.Sort_Bubble
2021class name :<init>
method name=<init>
[cf] sootMethod:hasNOTActiveBody <init>
If statment
If statment
If statment
[cf] zystble
2021class name :main
[cf] sootMethod a:main
[cf] sootMethod zystble
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
Have
the value=i0
the value=100
If statment
If statment
2021class name :bubbleSort
[cf] sootMethod a:bubbleSort
[cf] sootMethod zystble
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
Have
the value=$i3
the value=$i5
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
If statment
Have
the value=i2
the value=$i11
If statment
If statment
If statment
Have
the value=i1
the value=$i12
If statment
[CFMAP]2021:{test.Sort_Bubble={bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0]}}
[INVOKEMAP]2021size:1
[taint]SooClass:invoker.sgx_invoker
[taint]SooClass:test.Sort_Bubble
[taint] class: test.Sort_Bubble
methList :{bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0]}
[taint into] sootMethod: <init>
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0]}}  {test.Sort_Bubble={}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0]}}
[taint into] sootMethod: main
[i0]
class name :test.Sort_Bubble
method name :main
method list :[i0]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0]
[taint source] u:newarray (int)[100]
SourceList:[i0]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0]
[taint source] u:100001.0
SourceList:[i0]
[taint source] u:$d0 * 100001.0
SourceList:[i0]
20210427node out :[]
20210427node :$i1 = (int) $d1
20210427node in :[]
普通复制语句1112:$i1 = (int) $d1
[taint source] u:$d1
SourceList:[i0]
[taint source] u:(int) $d1
SourceList:[i0]
20210427node out :[]
20210427node :r1[i0] = $i1
20210427node in :[]
普通复制语句1112:r1[i0] = $i1
[taint source] u:r1
SourceList:[i0]
[taint source] u:i0
SourceList:[i0]
[taint source] Value:i0
======out====:r1[i0]
20210427node out :[r1[i0]]
20210427node :i0 = i0 + 1
20210427node in :[r1[i0]]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[r1[i0]]
flowThrough node:i0 = i0 + 1
flowThrough out:[r1[i0], i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[r1[i0], i0]
20210427node out :[$d0]
flowThrough in :[r1[i0], i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, r1[i0], i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, r1[i0], i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, r1[i0], i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, r1[i0], i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, r1[i0], i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, r1[i0], i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, r1[i0], i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, r1[i0], i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, r1[i0], i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1[i0], i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, r1[i0], $i1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, r1[i0], $i1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1[i0], r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, r1[i0], $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, r1[i0], $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1[i0], r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
outSet:r1[i0]
outSet base:r1
match value:r1[i0]
isoutSetContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1[i0], r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1[i0], r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, r1[i0], $i1, r1, i0]
analysis.outSet.size():6
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1[i0] type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@3fce0f57, main=[I@7151397a}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@b94b2b5
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
[taint328]iiiiiii {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@2b20e543, main=[I@7151397a}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: <init>
[]
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@2b20e543, main=[I@7151397a}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: main
[i0, $d0, $d1, $i1, r1[i0], r1]
class name :test.Sort_Bubble
method name :main
method list :[i0, $d0, $d1, $i1, r1[i0], r1]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
aaaa:0
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] u:newarray (int)[100]
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:$d0
======out====:$d1
20210427node out :[$d1]
20210427node :$i1 = (int) $d1
20210427node in :[$d1]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d1]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d1, $i1]
20210427node :r1[i0] = $i1
20210427node in :[$d1, $i1]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d1, $i1]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d1, $i1, r1]
20210427node :i0 = i0 + 1
20210427node in :[$d1, $i1, r1]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[$d1, $i1, r1]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
isoutSetContains  true value:r1 index:0
isSourceListContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, $i1, r1, i0]
analysis.outSet.size():5
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@7caba7d3, main=[I@69974d96}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@4c66e902
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@784ba97d, main=[I@69974d96}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: <init>
[]
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@784ba97d, main=[I@69974d96}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: main
[i0, $d0, $d1, $i1, r1[i0], r1]
class name :test.Sort_Bubble
method name :main
method list :[i0, $d0, $d1, $i1, r1[i0], r1]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
aaaa:0
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] u:newarray (int)[100]
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:$d0
======out====:$d1
20210427node out :[$d1]
20210427node :$i1 = (int) $d1
20210427node in :[$d1]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d1]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d1, $i1]
20210427node :r1[i0] = $i1
20210427node in :[$d1, $i1]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d1, $i1]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d1, $i1, r1]
20210427node :i0 = i0 + 1
20210427node in :[$d1, $i1, r1]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[$d1, $i1, r1]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
isoutSetContains  true value:r1 index:0
isSourceListContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, $i1, r1, i0]
analysis.outSet.size():5
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@314304b1, main=[I@26e919bb}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@119857f2
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@28b5d9e4, main=[I@26e919bb}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint]SooClass:invoker.sgx_invoker
[taint]SooClass:test.Sort_Bubble
[taint] class: test.Sort_Bubble
methList :{<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}
[taint into] sootMethod: <init>
[]
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@28b5d9e4, main=[I@26e919bb}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: main
[i0, $d0, $d1, $i1, r1[i0], r1]
class name :test.Sort_Bubble
method name :main
method list :[i0, $d0, $d1, $i1, r1[i0], r1]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
aaaa:0
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] u:newarray (int)[100]
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:$d0
======out====:$d1
20210427node out :[$d1]
20210427node :$i1 = (int) $d1
20210427node in :[$d1]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d1]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d1, $i1]
20210427node :r1[i0] = $i1
20210427node in :[$d1, $i1]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d1, $i1]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d1, $i1, r1]
20210427node :i0 = i0 + 1
20210427node in :[$d1, $i1, r1]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[$d1, $i1, r1]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
isoutSetContains  true value:r1 index:0
isSourceListContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, $i1, r1, i0]
analysis.outSet.size():5
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@1149b0a6, main=[I@7cec6b27}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@56f0d84
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@3de057e5, main=[I@7cec6b27}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: <init>
[]
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@3de057e5, main=[I@7cec6b27}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: main
[i0, $d0, $d1, $i1, r1[i0], r1]
class name :test.Sort_Bubble
method name :main
method list :[i0, $d0, $d1, $i1, r1[i0], r1]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
aaaa:0
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] u:newarray (int)[100]
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:$d0
======out====:$d1
20210427node out :[$d1]
20210427node :$i1 = (int) $d1
20210427node in :[$d1]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d1]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d1, $i1]
20210427node :r1[i0] = $i1
20210427node in :[$d1, $i1]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d1, $i1]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d1, $i1, r1]
20210427node :i0 = i0 + 1
20210427node in :[$d1, $i1, r1]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[$d1, $i1, r1]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
isoutSetContains  true value:r1 index:0
isSourceListContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, $i1, r1, i0]
analysis.outSet.size():5
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@53aa9b1f, main=[I@65ae3b22}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@11ac6955
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@4e375483, main=[I@65ae3b22}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: <init>
[]
class name :test.Sort_Bubble
method name :<init>
method list :[]
clasname=test.Sort_Bubble
methodname=<init>
sourcelist2021=[]
20210427node :r0 := @this: test.Sort_Bubble
20210427node in :[]
20210427node out :[]
currStmt20210423:r0 := @this: test.Sort_Bubble
20210427node :specialinvoke r0.<java.lang.Object: void <init>()>()
20210427node in :[]
20210427node out :[]
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
20210427node :return
20210427node in :[]
20210427node out :[]
analysis.outSet.size():0
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void <init>()>
The data isgggg test.Sort_Bubble <init> [] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@4e375483, main=[I@65ae3b22}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
[taint329]i invoke specialinvoke r0.<java.lang.Object: void <init>()>()
[taint328]i invoke <java.lang.Object: void <init>()>
[taint328]i invoke 0
srcValue=[]
destValue:[]
taint data:[]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: main
[i0, $d0, $d1, $i1, r1[i0], r1]
class name :test.Sort_Bubble
method name :main
method list :[i0, $d0, $d1, $i1, r1[i0], r1]
clasname=test.Sort_Bubble
methodname=main
sourcelist2021=[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node :r0 := @parameter0: java.lang.String[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: java.lang.String[]  index:0
ClassName:test.Sort_Bubble
MethodName:main
aaaa:0
20210427node out :[]
currStmt20210423:r0 := @parameter0: java.lang.String[]
20210427node :r1 = newarray (int)[100]
20210427node in :[]
普通复制语句1112:r1 = newarray (int)[100]
[taint source] u:100
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] u:newarray (int)[100]
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :i0 = 0
20210427node in :[]
普通复制语句1112:i0 = 0
[taint source] u:0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
20210427node out :[]
20210427node :goto [?= (branch)]
20210427node in :[]
20210427node out :[]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
20210427node out :[]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[]
普通复制语句1112:$d1 = $d0 * 100001.0
[taint source] u:$d0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:$d0
======out====:$d1
20210427node out :[$d1]
20210427node :$i1 = (int) $d1
20210427node in :[$d1]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d1]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d1, $i1]
20210427node :r1[i0] = $i1
20210427node in :[$d1, $i1]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d1, $i1]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d1, $i1, r1]
20210427node :i0 = i0 + 1
20210427node in :[$d1, $i1, r1]
普通复制语句1112:i0 = i0 + 1
[taint source] u:i0
SourceList:[i0, $d0, $d1, $i1, r1[i0], r1]
[taint source] Value:i0
======out====:i0
20210427node out :[i0]
flowThrough in :[$d1, $i1, r1]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
调用语句赋值给变量:$d0 = staticinvoke <java.lang.Math: double random()>()
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint328]a invoke <java.lang.Math: double random()>
[taint328]a invoke 0
20210427node :$d1 = $d0 * 100001.0
20210427node in :[$d0, $d1, $i1, r1, i0]
A $d0 * 100001.0 $d1 false
wrong in here:$d1
20210427node out :[$d1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$d1 = $d0 * 100001.0
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :$i1 = (int) $d1
20210427node in :[$d0, $d1, $i1, r1, i0]
A (int) $d1 $i1 false
wrong in here:$i1
20210427node out :[$i1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:$i1 = (int) $d1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :r1[i0] = $i1
20210427node in :[$d0, $d1, $i1, r1, i0]
A $i1 r1[i0] false
assn.getLeftOpBox().getValue() ArrayRefr1[i0]
assn.getLeftOpBox().getValue() ArrayRef=r1
20210427node out :[r1]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:r1[i0] = $i1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :i0 = i0 + 1
20210427node in :[$d0, $d1, $i1, r1, i0]
A i0 + 1 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:i0 = i0 + 1
flowThrough out:[$d0, $d1, $i1, r1, i0]
20210427node :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[$d0]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
flowThrough out:[$d0, $d1, $i1, r1, i0]
Have
Stmt if :if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()Stmt if value:i0 < 100the value=i0
the value=100
maintainValues.size1
ifValues1
20210427node :staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
flowThrough out:[$d0, $d1, $i1, r1, i0]
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
isoutSetContains  true value:r1 index:0
isSourceListContains  true value:r1 index:0
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
20210427node :return
20210427node in :[$d0, $d1, $i1, r1, i0]
20210427node out :[]
flowThrough in :[$d0, $d1, $i1, r1, i0]
flowThrough node:return
flowThrough out:[$d0, $d1, $i1, r1, i0]
analysis.outSet.size():5
[TAINT]out:$d0 type:double
[TAINT]out:$d1 type:double
[TAINT]out:$i1 type:int
[TAINT]out:r1 type:int[]
[TAINT]out:i0 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void main(java.lang.String[])>
The data isgggg test.Sort_Bubble main [i0, $d0, $d1, $i1, r1[i0], r1] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@128d8c93, main=[I@b081069}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
[taint329]i invoke staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
[taint328]i invoke <test.Sort_Bubble: void bubbleSort(int[])>
[taint328]i invoke 1
value:r1
in here:[I@3e6d6327
[invokemap]invoke:bubbleSort  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
isSourceListContains  true value:r1 index:0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = i0 + 1
currStmt left value20210420:i0
普通赋值语句:i0 = i0 + 1
调用语句赋值给变量:i0 = i0 + 1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1[i0] = $i1
currStmt left value20210420:r1[i0]
普通赋值语句:r1[i0] = $i1
调用语句赋值给变量:r1[i0] = $i1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=r1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=i0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$i1
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$i1 = (int) $d1
currStmt left value20210420:$i1
普通赋值语句:$i1 = (int) $d1
调用语句赋值给变量:$i1 = (int) $d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d1
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=(int) $d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d1 = $d0 * 100001.0
currStmt left value20210420:$d1
普通赋值语句:$d1 = $d0 * 100001.0
调用语句赋值给变量:$d1 = $d0 * 100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100001.0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=$d0 * 100001.0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:$d0 = staticinvoke <java.lang.Math: double random()>()
currStmt left value20210420:$d0
BackWard 20210419===staticinvoke <java.lang.Math: double random()>()
[BackWard taint329]i invoke $d0 = staticinvoke <java.lang.Math: double random()>()
[BackWard taint328]i invoke <java.lang.Math: double random()>
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
Have
the value=i0
the value=100
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:i0 = 0
currStmt left value20210420:i0
普通赋值语句:i0 = 0
调用语句赋值给变量:i0 = 0
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
currStmt20210420:r1 = newarray (int)[100]
currStmt left value20210420:r1
普通赋值语句:r1 = newarray (int)[100]
调用语句赋值给变量:r1 = newarray (int)[100]
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=100
2021=[i0, $d0, $d1, $i1, r1[i0], r1]
2021tmp=newarray (int)[100]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
srcValue=[]
destValue:[]
taint data:[i0, $d0, $d1, $i1, r1[i0], r1]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[taint into] sootMethod: bubbleSort
[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
class name :test.Sort_Bubble
method name :bubbleSort
method list :[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
clasname=test.Sort_Bubble
methodname=bubbleSort
sourcelist2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node :r0 := @parameter0: int[]
20210427node in :[]
[idStmt]iiiiiii r0 := @parameter0: int[]  index:0
ClassName:test.Sort_Bubble
MethodName:bubbleSort
aaaa:1
[taint328]MethodName bubbleSort index0
[taint328]value r0
20210427node out :[r0]
currStmt20210423:r0 := @parameter0: int[]
this index is invalid and it's value:0
20210427node :z0 = 0
20210427node in :[r0]
普通复制语句1112:z0 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0]
flowThrough node:z0 = 0
flowThrough out:[r0]
20210427node :i0 = lengthof r0
20210427node in :[r0]
A lengthof r0 i0 false
wrong in here:i0
20210427node out :[i0]
flowThrough in :[r0]
flowThrough node:i0 = lengthof r0
flowThrough out:[r0, i0]
20210427node :i1 = 0
20210427node in :[r0, i0]
普通复制语句1112:i1 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:i1 = 0
flowThrough out:[r0, i0]
20210427node :goto [?= $i12 = i0 - 1]
20210427node in :[r0, i0]
20210427node out :[]
flowThrough in :[r0, i0]
flowThrough node:goto [?= $i12 = i0 - 1]
flowThrough out:[r0, i0]
20210427node :$i12 = i0 - 1
20210427node in :[r0, i0]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[r0, i0]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i12, r0, i0]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i12, r0, i0]
20210427node out :[i2]
flowThrough in :[$i12, r0, i0]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i12, i2, r0, i0]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i12, i2, r0, i0]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:i2 = 0
flowThrough out:[$i12, i2, r0, i0]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i12, i2, r0, i0]
20210427node out :[]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i12, i2, r0, i0]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, r0, i0]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, r0, i0]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, r0, i0]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i10, r0, i0]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i10, r0, i0]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, r0, $i11, i0]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, r0, $i11, i0, $i3]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i10, r0, $i11, i0, $i3]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i10, r0, $i11, i0, $i3]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i3]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i3]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i3]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i12, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, $i7, i6, $i3, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
普通复制语句1112:i1 = i1 + 1
[taint source] u:i1
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
[taint source] Value:i1
======out====:i1
20210427node out :[i1]
flowThrough in :[$i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i7, $i3, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i12 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i12 false
wrong in here:$i12
20210427node out :[$i12]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i12 = i0 - 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i1 < $i12 goto i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i1 < $i12 goto i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i1 < $i12 goto i2 = 0Stmt if value:i1 < $i12the value=i1
the value=$i12
maintainValues.size2
ifValues2
20210427node :i2 = 0
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
普通复制语句1112:i2 = 0
[taint source] u:0
SourceList:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = 0
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :goto [?= $i10 = i0 - 1]
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:goto [?= $i10 = i0 - 1]
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i11 = $i10 - i1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i10 - i1 $i11 false
wrong in here:$i11
20210427node out :[$i11]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i11 = $i10 - i1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if i2 < $i11 goto $i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if i2 < $i11 goto $i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if i2 < $i11 goto $i3 = r0[i2]Stmt if value:i2 < $i11the value=i2
the value=$i11
maintainValues.size2
ifValues2
20210427node :$i3 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] $i3 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i3
20210427node out :[$i3]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i3 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i4 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i4 false
wrong in here:$i4
20210427node out :[$i4]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i4 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i5 = r0[$i4]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i4] $i5 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i5
20210427node out :[$i5]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i5 = r0[$i4]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :if $i3 <= $i5 goto i2 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[i2]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:if $i3 <= $i5 goto i2 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
Have
Stmt if :if $i3 <= $i5 goto i2 = i2 + 1Stmt if value:$i3 <= $i5the value=$i3
the value=$i5
maintainValues.size2
ifValues2
20210427node :i6 = r0[i2]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[i2] i6 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:i6
20210427node out :[i6]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i6 = r0[i2]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i7 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i7 false
wrong in here:$i7
20210427node out :[$i7]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i7 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i8 = r0[$i7]
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A r0[$i7] $i8 false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
wrong in here:$i8
20210427node out :[$i8]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i8 = r0[$i7]
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[i2] = $i8
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A $i8 r0[i2] false
assn.getLeftOpBox().getValue() ArrayRefr0[i2]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[i2] = $i8
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i9 = i2 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 $i9 false
wrong in here:$i9
20210427node out :[$i9]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i9 = i2 + 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :r0[$i9] = i6
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i6 r0[$i9] false
assn.getLeftOpBox().getValue() ArrayRefr0[$i9]
assn.getLeftOpBox().getValue() ArrayRef=r0
20210427node out :[r0]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:r0[$i9] = i6
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i2 = i2 + 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i2 + 1 i2 false
wrong in here:i2
20210427node out :[i2]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i2 = i2 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :$i10 = i0 - 1
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
A i0 - 1 $i10 false
wrong in here:$i10
20210427node out :[$i10]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:$i10 = i0 - 1
flowThrough out:[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :i1 = i1 + 1
20210427node in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
A i1 + 1 i1 false
wrong in here:i1
20210427node out :[i1]
flowThrough in :[$i7, $i3, $i12, i1, i2, $i10, $i8, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:i1 = i1 + 1
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node :return
20210427node in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
20210427node out :[]
flowThrough in :[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
flowThrough node:return
flowThrough out:[$i7, $i3, i1, $i12, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
analysis.outSet.size():14
[TAINT]out:$i7 type:int
[TAINT]out:$i3 type:int
[TAINT]out:i1 type:int
[TAINT]out:$i12 type:int
[TAINT]out:i2 type:int
[TAINT]out:$i10 type:int
[TAINT]out:$i8 type:int
[TAINT]out:$i4 type:int
[TAINT]out:r0 type:int[]
[TAINT]out:$i11 type:int
[TAINT]out:i0 type:int
[TAINT]out:$i5 type:int
[TAINT]out:i6 type:int
[TAINT]out:$i9 type:int
[CFMAP]2021 After taintAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
The data isgggg 
<test.Sort_Bubble: void bubbleSort(int[])>
The data isgggg test.Sort_Bubble bubbleSort [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9] {test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}  {test.Sort_Bubble={bubbleSort=[I@7f88b575, main=[I@b081069}}
Coming...
doAnalysis Startingqqqqqqqq.....
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = i1 + 1
currStmt left value20210420:i1
普通赋值语句:i1 = i1 + 1
调用语句赋值给变量:i1 = i1 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = i2 + 1
currStmt left value20210420:i2
普通赋值语句:i2 = i2 + 1
调用语句赋值给变量:i2 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[$i9] = i6
currStmt left value20210420:r0[$i9]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i9 = i2 + 1
currStmt left value20210420:$i9
普通赋值语句:$i9 = i2 + 1
调用语句赋值给变量:$i9 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:r0[i2] = $i8
currStmt left value20210420:r0[i2]
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i8 = r0[$i7]
currStmt left value20210420:$i8
普通赋值语句:$i8 = r0[$i7]
调用语句赋值给变量:$i8 = r0[$i7]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i7
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i7]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i7 = i2 + 1
currStmt left value20210420:$i7
普通赋值语句:$i7 = i2 + 1
调用语句赋值给变量:$i7 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i6 = r0[i2]
currStmt left value20210420:i6
普通赋值语句:i6 = r0[i2]
调用语句赋值给变量:i6 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=$i3
the value=$i5
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i5 = r0[$i4]
currStmt left value20210420:$i5
普通赋值语句:$i5 = r0[$i4]
调用语句赋值给变量:$i5 = r0[$i4]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i4
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[$i4]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i4 = i2 + 1
currStmt left value20210420:$i4
普通赋值语句:$i4 = i2 + 1
调用语句赋值给变量:$i4 = i2 + 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2 + 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i3 = r0[i2]
currStmt left value20210420:$i3
普通赋值语句:$i3 = r0[i2]
调用语句赋值给变量:$i3 = r0[i2]
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i2
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0[i2]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i2
the value=$i11
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i11 = $i10 - i1
currStmt left value20210420:$i11
普通赋值语句:$i11 = $i10 - i1
调用语句赋值给变量:$i11 = $i10 - i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=$i10 - i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i10 = i0 - 1
currStmt left value20210420:$i10
普通赋值语句:$i10 = i0 - 1
调用语句赋值给变量:$i10 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i2 = 0
currStmt left value20210420:i2
普通赋值语句:i2 = 0
调用语句赋值给变量:i2 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
Have
the value=i1
the value=$i12
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:$i12 = i0 - 1
currStmt left value20210420:$i12
普通赋值语句:$i12 = i0 - 1
调用语句赋值给变量:$i12 = i0 - 1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=1
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=i0 - 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i1 = 0
currStmt left value20210420:i1
普通赋值语句:i1 = 0
调用语句赋值给变量:i1 = 0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:i0 = lengthof r0
currStmt left value20210420:i0
普通赋值语句:i0 = lengthof r0
调用语句赋值给变量:i0 = lengthof r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=r0
2021=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
2021tmp=lengthof r0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
currStmt20210420:z0 = 0
currStmt left value20210420:z0
srcValue=[]
destValue:[]
taint data:[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
Coming in Backward Analysis
doAnalysis endqqqqqqq.....
come here
[CFMAP]2021 After BackwardAnalysis:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[========CFMAP=======after taint===]:{test.Sort_Bubble={<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}}
[==========memberVariables==after taint=========]:{}
[============staticmemberVariables=====after taint=======]:{}
[========INVOKE==========] class = test.Sort_Bubble method = bubbleSort, Value1 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[========INVOKE==========] class = test.Sort_Bubble method = main, Value1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Key class = test.Sort_Bubble, Value = {<init>=[], bubbleSort=[$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9], main=[i0, $d0, $d1, $i1, r1[i0], r1]}
Key1 method = <init>, Value1 = []
Key1 method = bubbleSort, Value1 = [$i3, $i5, i2, $i11, i1, $i12, r0, $i7, $i10, $i8, $i4, i0, i6, $i9]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
Key1 method = main, Value1 = [i0, $d0, $d1, $i1, r1[i0], r1]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
want to delete tvalue:r1[i0]   type:int [JimpleLocalBox(r1), ImmediateBox(i0)]
v r1
v i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
[========CFMAP=======after delete constant===]:{test.Sort_Bubble={<init>=[], bubbleSort=[$i7, $i3, $i12, i1, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9], main=[$d0, $d1, $i1, r1, i0]}}
[add member]SooClass:invoker.sgx_invoker
[add member]SooClass:test.Sort_Bubble
[add member] class: test.Sort_Bubble
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
===b1  :true  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
===b1  :false  b2 :true  b3:false
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
[========CFMAP==========]:{test.Sort_Bubble={<init>=[], bubbleSort=[$i7, $i3, $i12, i1, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9], main=[$d0, $d1, $i1, r1, i0]}}
[========INVOKEMAP==========]:{test.Sort_Bubble={bubbleSort=[I@7f88b575, main=[I@b081069}}
[==========memberVariables===========]:{}
[============staticmemberVariables============]:{}
Transforming invoker.sgx_invoker... 
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:<clinit>
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:<init>
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:sgx_invoker
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:clear
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:add
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:setCounter
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:setCuuid
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:initenclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:closeenclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getUUID
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:initArrayInEnclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:initValueInEnclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:deleteValueInEnclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:updateValueInEnclave
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:updateMultArray
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getBooleanValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getIntValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getIntArray
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getDoubleArray
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getByteArray
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getFloatValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getDoubleValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getCharValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getLongValue
classname20210512: 1
classname20210512:invoker.sgx_invoker
MethodName20210512:getByteValue
Transforming test.Sort_Bubble... 
classname20210512: 1
classname20210512:test.Sort_Bubble
MethodName20210512:<init>
classname20210512: 1
classname20210512:test.Sort_Bubble
MethodName20210512:main
<<!!!!!!START!!!!!!>>start insertting at class: test.Sort_Bubble
<<!!!!!!START!!!!!!>>start processing function: <test.Sort_Bubble: void main(java.lang.String[])>;
tLocal=r0
tLocal=r1
tLocal=i0
tLocal=$d0
tLocal=$d1
tLocal=$i1
tLocal=invokeLineNo
tLocal=getUUID
tLocal=invokeUUID
tLocal=branchInvokeResult
tLocal=sgxInvoker
**********************Line376
====currScanPre==0404=====r0 := @parameter0: java.lang.String[]
def:r0
use:@parameter0: java.lang.String[]
====currScanPre==0404=====r1 = newarray (int)[100]
def:r1
add def:r1
use:100
use:newarray (int)[100]
====currScanPre==0404=====i0 = 0
def:i0
add def:i0
use:0
====currScanPre==0404=====goto [?= (branch)]
====currScanPre==0404=====$d0 = staticinvoke <java.lang.Math: double random()>()
def:$d0
add def:$d0
use:staticinvoke <java.lang.Math: double random()>()
====currScanPre==0404=====$d1 = $d0 * 100001.0
def:$d1
add def:$d1
use:$d0
add use:$d0
use:100001.0
use:$d0 * 100001.0
====currScanPre==0404=====$i1 = (int) $d1
def:$i1
add def:$i1
use:$d1
add use:$d1
use:(int) $d1
====currScanPre==0404=====r1[i0] = $i1
def:r1[i0]
use:r1
add use:r1
use:i0
add use:i0
use:$i1
add use:$i1
====currScanPre==0404=====i0 = i0 + 1
def:i0
add def:i0
use:i0
add use:i0
use:1
use:i0 + 1
====currScanPre==0404=====if i0 < 100 goto $d0 = staticinvoke <java.lang.Math: double random()>()
use:i0
add use:i0
use:100
use:i0 < 100
====currScanPre==0404=====staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
use:r1
add use:r1
use:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
====currScanPre==0404=====return
**********************Line456
the value of param list:i0 $i1 
***zy+++lastIdentityStmt is： r0 := @parameter0: java.lang.String[];
localArray:[r0, r1, i0, $d0, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
ok condVals5
currProStmt is IdentityStmt:r0 := @parameter0: java.lang.String[]
0424 identity Vals r0 := @parameter0: java.lang.String[]
line 701 current stmt is: ----------#r1 = newarray (int)[100]#----------------
 line632 current stmt is: ----------#r1 = newarray (int)[100]#----------------
currDefVals:[r1]
currDefVals after retainAll:[r1]
currUseVals:[100, newarray (int)[100]]
currUseVals after retainAll:[]
r0: has been inited in original javafile!
20210603=r1
20210603=int[]
20210603=r1 = null
r1: init stmt will be inserted into jimplefile! :r1 = null
20210603=i0
20210603=int
20210603=i0 = 0
i0: init stmt will be inserted into jimplefile! :i0 = 0
20210603=$d0
20210603=double
$d0: init stmt will be inserted into jimplefile! :$d0 = 0.0
20210603=$d1
20210603=double
$d1: init stmt will be inserted into jimplefile! :$d1 = 0.0
20210603=$i1
20210603=int
20210603=$i1 = 0
$i1: init stmt will be inserted into jimplefile! :$i1 = 0
20210603=invokeLineNo
20210603=long
invokeLineNo: init stmt will be inserted into jimplefile! :invokeLineNo = 0L
20210603=getUUID
20210603=java.lang.String
20210603=getUUID = null
getUUID: init stmt will be inserted into jimplefile! :getUUID = null
20210603=invokeUUID
20210603=java.lang.String
20210603=invokeUUID = null
invokeUUID: init stmt will be inserted into jimplefile! :invokeUUID = null
20210603=branchInvokeResult
20210603=boolean
branchInvokeResult: init stmt will be inserted into jimplefile! :branchInvokeResult = 0
20210603=sgxInvoker
20210603=invoker.sgx_invoker
20210603=sgxInvoker = null
sgxInvoker: init stmt will be inserted into jimplefile! :sgxInvoker = null
2199 currStmt: r1 = newarray (int)[100]
2204 stmt: sgxInvoker = new invoker.sgx_invoker
2206 currStmt: r1 = newarray (int)[100]
ZYSTBLE condValsTypeArray:[2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
ZYSTBLE 8.31:
ValueInitStmt is:#virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean initValueInEnclave(java.lang.String,java.lang.String,long)>(getUUID, invokeUUID, invokeLineNo)#--
currProStmt is NewArrayExpr: r1 = newarray (int)[100];
NewArrayExpr :newarray (int)[100]  100
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
ValueInitStmt is:#virtualinvoke sgxInvoker.<invoker.sgx_invoker: void initArrayInEnclave(java.lang.String,int,int,int)>(getUUID, 70, 100, 0)#--
NewArrayExpr4
line 701 current stmt is: ----------#i0 = 0#----------------
 line632 current stmt is: ----------#i0 = 0#----------------
currDefVals:[i0]
currDefVals after retainAll:[i0]
currUseVals:[0]
currUseVals after retainAll:[]
currProStmt is AssignStmt: i0 = 0;
toBeHiddenDefValues:[i0]
enter replaceValueUpdateStmt:i0 = 0
ass r curr pro Unit: 0;
ass r curr pro Unit type: int;
ass l curr pro Unit: i0;
ass l curr pro Unit type: int;
=curr pro Unit: 0;
exp:********0*************
Constant exp********0*************
values:********0*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [r1, i0, $d0, $d1, $i1]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=0
return_index=100
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=0
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :0 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
add: else :0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2869 not array
loc=i0
localArray=[r0, r1, i0, $d0, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i1
localArray=[r0, r1, i0, $d0, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
setParam0=false
!setParam0
2911 set left_index:int_0
indexwriter 3:
left_index:int_0
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:100
return_flag_index:-1
counter:0
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 0L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i0 = 0++++++++++++++++++++++
line 701 current stmt is: ----------#goto [?= (branch)]#----------------
 line632 current stmt is: ----------#goto [?= (branch)]#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[]
currUseVals after retainAll:[]
line 701 current stmt is: ----------#$d0 = staticinvoke <java.lang.Math: double random()>()#----------------
 line632 current stmt is: ----------#$d0 = staticinvoke <java.lang.Math: double random()>()#----------------
currDefVals:[$d0]
currDefVals after retainAll:[$d0]
currUseVals:[staticinvoke <java.lang.Math: double random()>()]
currUseVals after retainAll:[]
currProStmt is InvokeExpr: $d0 = staticinvoke <java.lang.Math: double random()>();
20210618 assi methodname :random
20210618 assi classname :java.lang.Math
currProStmt isn't sensitive:$d0 = staticinvoke <java.lang.Math: double random()>()
currProStmt will change to GET:$d0 = staticinvoke <java.lang.Math: double random()>()
20210603=tmpResult1
20210603=double
new assi:$d0 = tmpResult1
enter replaceValueUpdateStmt:$d0 = tmpResult1
ass r curr pro Unit: tmpResult1;
ass r curr pro Unit type: double;
ass l curr pro Unit: $d0;
ass l curr pro Unit type: double;
=curr pro Unit: tmpResult1;
exp:********tmpResult1*************
Local exp********tmpResult1*************
values:********tmpResult1*************
values.type:********double*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [r1, i0, $d0, $d1, $i1]
rightCondValue2: []
=leftOpValue.type==double
=leftOpValue==$d0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
returnTypeIndex=2
pos_index=0
return_index=200
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
values.get(0)=tmpResult1
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 2++++++++++++++++++++++
values.size=1
0515 :tmpResult1 double
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
add: else :tmpResult1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
2869 not array
loc=$d0
localArray=[r0, r1, i0, $d0, tmpResult1, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=tmpResult1
localArray=[r0, r1, i0, $d0, tmpResult1, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc.equals: index:0
2891 set left_index::0
loggedValue type:double
loggerLocal :sgxInvoker
ZY newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void add(double)>(tmpResult1)++++++++++++++++++++++
add: loc :virtualinvoke sgxInvoker.<invoker.sgx_invoker: void add(double)>(tmpResult1)  index:0
loc=$d1
localArray=[r0, r1, i0, $d0, tmpResult1, $d1, $i1, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
setParam0=true
indexwriter 3:
left_index:0
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:200
return_flag_index:-1
counter:1
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 1L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $d0 = tmpResult1++++++++++++++++++++++
line 701 current stmt is: ----------#$d1 = $d0 * 100001.0#----------------
 line632 current stmt is: ----------#$d1 = $d0 * 100001.0#----------------
currDefVals:[$d1]
currDefVals after retainAll:[$d1]
currUseVals:[$d0, 100001.0, $d0 * 100001.0]
currUseVals after retainAll:[$d0]
currProStmt is AssignStmt: $d1 = $d0 * 100001.0;
toBeHiddenDefValues:[$d1]
enter replaceValueUpdateStmt:$d1 = $d0 * 100001.0
ass r curr pro Unit: $d0 * 100001.0;
ass r curr pro Unit type: double;
ass l curr pro Unit: $d1;
ass l curr pro Unit type: double;
=curr pro Unit: $d0 * 100001.0;
exp:********$d0 * 100001.0*************
exp:********$d0*************
Local exp********$d0*************
exp:********100001.0*************
Constant exp********100001.0*************
values:********$d0*************
values.type:********double*************
values:********100001.0*************
values.type:********double*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [r1, i0, $d0, $d1, $i1]
rightCondValue2: []
operator:******** * *************
=leftOpValue.type==double
=leftOpValue==$d1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
returnTypeIndex=2
pos_index=1
return_index=201
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
values.get(0)=$d0
pos_index=0
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 2++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++$d0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
$d0 pos_index ==: 0
-----------8.1------------
indexwriter 3:
left_index:200
left_flag_index:-1
right_index:double_100001.0
right_flag_index:-1
return_index:201
return_flag_index:-1
counter:2
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 2L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $d1 = $d0 * 100001.0++++++++++++++++++++++
line 701 current stmt is: ----------#$i1 = (int) $d1#----------------
 line632 current stmt is: ----------#$i1 = (int) $d1#----------------
currDefVals:[$i1]
currDefVals after retainAll:[$i1]
currUseVals:[$d1, (int) $d1]
currUseVals after retainAll:[$d1]
currProStmt is AssignStmt: $i1 = (int) $d1;
toBeHiddenDefValues:[$i1]
enter replaceValueUpdateStmt:$i1 = (int) $d1
ass r curr pro Unit: (int) $d1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i1;
ass l curr pro Unit type: int;
=curr pro Unit: (int) $d1;
exp:********(int) $d1*************
values:********(int) $d1*************
values.type:********int*************
CastExpr
********
rOpArr********false*************
This is CastExpr to be replaced is: ++++++++$i1 = (int) $d1+++++update+++++++++
value :$d1 type:int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
indexWriter 1: 1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********double*************
20210626pos_index====1
20210626left_index====201
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
line 701 current stmt is: ----------#r1[i0] = $i1#----------------
 line632 current stmt is: ----------#r1[i0] = $i1#----------------
currDefVals:[r1, r1[i0]]
currDefVals after retainAll:[r1]
currUseVals:[r1, i0, $i1]
currUseVals after retainAll:[r1, i0, $i1]
currProStmt is AssignStmt: r1[i0] = $i1;
toBeHiddenDefValues:[r1]
enter replaceValueUpdateStmt:r1[i0] = $i1
ass r curr pro Unit: $i1;
ass r curr pro Unit type: int;
ass l curr pro Unit: r1[i0];
ass l curr pro Unit type: int;
=curr pro Unit: $i1;
exp:********$i1*************
Local exp********$i1*************
values:********$i1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [r1, i0, $d0, $d1, $i1]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==r1[i0]
A
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
210628Indevalue:i0
210628pos_index:0
210628left_index-1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=$i1
pos_index=1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :$i1 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
int or float flag
values.get(0):$i1
pos_index:1
2814 set left_index101
indexwriter 3:
left_index:101
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:100
return_flag_index:70
counter:4
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 4L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ r1[i0] = $i1++++++++++++++++++++++
line 701 current stmt is: ----------#i0 = i0 + 1#----------------
 line632 current stmt is: ----------#i0 = i0 + 1#----------------
currDefVals:[i0]
currDefVals after retainAll:[i0]
currUseVals:[i0, 1, i0 + 1]
currUseVals after retainAll:[i0]
currProStmt is AssignStmt: i0 = i0 + 1;
toBeHiddenDefValues:[i0]
enter replaceValueUpdateStmt:i0 = i0 + 1
ass r curr pro Unit: i0 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: i0;
ass l curr pro Unit type: int;
=curr pro Unit: i0 + 1;
exp:********i0 + 1*************
exp:********i0*************
Local exp********i0*************
exp:********1*************
Constant exp********1*************
values:********i0*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [r1, i0, $d0, $d1, $i1]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=0
return_index=100
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i0
pos_index=0
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i0 pos_index ==: 0
-----------8.1------------
indexwriter 3:
left_index:100
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:100
return_flag_index:-1
counter:5
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 5L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i0 = i0 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#if i0 < 100 goto tmpResult1 = staticinvoke <java.lang.Math: double random()>()#----------------
 line632 current stmt is: ----------#if i0 < 100 goto tmpResult1 = staticinvoke <java.lang.Math: double random()>()#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[i0, 100, i0 < 100]
currUseVals after retainAll:[i0]
the value=i0
the value=100
the value if stmt:[i0]
the method SourceList:[$d0, $d1, $i1, r1, i0]
 curr pro Unit: i0 < 100;
exp:********i0 < 100*************
exp:********i0*************
Local exp********i0*************
exp:********100*************
Constant exp********100*************
operator:******** < *************
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void clear()>()++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if i0 < 100 goto tmpResult1 = staticinvoke <java.lang.Math: double random()>()++++++++++++++++++++++
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> tuple-0 branch: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values0 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====0
left_index is:====100
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values1 is constant!
left_index：====b==:100
right_index：===b===:int_100
operator：===b===:[ < ]
re：===b===:-1
counter：===b===:6
assignStmt to insert is: ++++++++++++++++++++++++++ branchInvokeResult = virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean getBooleanValue(java.lang.String,long)>(getUUID, 6L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if branchInvokeResult == 1 goto tmpResult1 = staticinvoke <java.lang.Math: double random()>()++++++++++++++++++++++
currProStmt is IfStmt: if branchInvokeResult == 1 goto tmpResult1 = staticinvoke <java.lang.Math: double random()>();
line 701 current stmt is: ----------#staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)#----------------
 line632 current stmt is: ----------#staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[r1, staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)]
currUseVals after retainAll:[r1]
20210618replaceInvokeStmtA methodname :bubbleSort
20210618replaceInvokeStmtA classname :test.Sort_Bubble
currProStmt is sensitive invokestmt A:staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)
20210618===
20210618===4
20210618===2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
[invoke] index:70  i=0
after2: ++++++++++++++++++++++++++ staticinvoke <test.Sort_Bubble: void bubbleSort(int[])>(r1)++++++++++++++++++++++
static method:<test.Sort_Bubble: void bubbleSort(java.lang.String,long)>
[insi]   inStmt:staticinvoke <test.Sort_Bubble: void bubbleSort(java.lang.String,long)>(getUUID, 1L)
line 701 current stmt is: ----------#return#----------------
 line632 current stmt is: ----------#return#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[]
currUseVals after retainAll:[]
currProStmt return stmt before deleteValuestmt: return
<<!!!!!!ZYreturn!!!!!!>>this processing function: <test.Sort_Bubble: void main(java.lang.String[])>;
A
C2
B
ValueDeleteStmt is:#virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean deleteValueInEnclave(java.lang.String,java.lang.String,long)>(getUUID, "", 0L)#--
***++++++lastIdentityStmt is:++++++++++r0 := @parameter0: java.lang.String[]
classname20210512: 1
classname20210512:test.Sort_Bubble
MethodName20210512:bubbleSort
<<!!!!!!START!!!!!!>>start insertting at class: test.Sort_Bubble
<<!!!!!!START!!!!!!>>start processing function: <test.Sort_Bubble: void bubbleSort(java.lang.String,long)>;
tLocal=r0
tLocal=z0
tLocal=i0
tLocal=i1
tLocal=i2
tLocal=$i3
tLocal=$i4
tLocal=$i5
tLocal=i6
tLocal=$i7
tLocal=$i8
tLocal=$i9
tLocal=$i10
tLocal=$i11
tLocal=$i12
tLocal=invokeLineNo
tLocal=getUUID
tLocal=invokeUUID
tLocal=branchInvokeResult
tLocal=sgxInvoker
**********************Line376
====currScanPre==0404=====r0 := @parameter0: int[]
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
====currScanPre==0404=====z0 = 0
def:z0
use:0
====currScanPre==0404=====i0 = lengthof r0
def:i0
add def:i0
use:r0
add use:r0
use:lengthof r0
====currScanPre==0404=====i1 = 0
def:i1
add def:i1
use:0
====currScanPre==0404=====goto [?= $i12 = i0 - 1]
====currScanPre==0404=====i2 = 0
def:i2
add def:i2
use:0
====currScanPre==0404=====goto [?= $i10 = i0 - 1]
====currScanPre==0404=====$i3 = r0[i2]
def:$i3
add def:$i3
use:r0
add use:r0
use:i2
add use:i2
use:r0[i2]
====currScanPre==0404=====$i4 = i2 + 1
def:$i4
add def:$i4
use:i2
add use:i2
use:1
use:i2 + 1
====currScanPre==0404=====$i5 = r0[$i4]
def:$i5
add def:$i5
use:r0
add use:r0
use:$i4
add use:$i4
use:r0[$i4]
====currScanPre==0404=====if $i3 <= $i5 goto i2 = i2 + 1
use:$i3
add use:$i3
use:$i5
add use:$i5
use:$i3 <= $i5
====currScanPre==0404=====i6 = r0[i2]
def:i6
add def:i6
use:r0
add use:r0
use:i2
add use:i2
use:r0[i2]
====currScanPre==0404=====$i7 = i2 + 1
def:$i7
add def:$i7
use:i2
add use:i2
use:1
use:i2 + 1
====currScanPre==0404=====$i8 = r0[$i7]
def:$i8
add def:$i8
use:r0
add use:r0
use:$i7
add use:$i7
use:r0[$i7]
====currScanPre==0404=====r0[i2] = $i8
def:r0[i2]
use:r0
add use:r0
use:i2
add use:i2
use:$i8
add use:$i8
====currScanPre==0404=====$i9 = i2 + 1
def:$i9
add def:$i9
use:i2
add use:i2
use:1
use:i2 + 1
====currScanPre==0404=====r0[$i9] = i6
def:r0[$i9]
use:r0
add use:r0
use:$i9
add use:$i9
use:i6
add use:i6
====currScanPre==0404=====i2 = i2 + 1
def:i2
add def:i2
use:i2
add use:i2
use:1
use:i2 + 1
====currScanPre==0404=====$i10 = i0 - 1
def:$i10
add def:$i10
use:i0
add use:i0
use:1
use:i0 - 1
====currScanPre==0404=====$i11 = $i10 - i1
def:$i11
add def:$i11
use:$i10
add use:$i10
use:i1
add use:i1
use:$i10 - i1
====currScanPre==0404=====if i2 < $i11 goto $i3 = r0[i2]
use:i2
add use:i2
use:$i11
add use:$i11
use:i2 < $i11
====currScanPre==0404=====i1 = i1 + 1
def:i1
add def:i1
use:i1
add use:i1
use:1
use:i1 + 1
====currScanPre==0404=====$i12 = i0 - 1
def:$i12
add def:$i12
use:i0
add use:i0
use:1
use:i0 - 1
====currScanPre==0404=====if i1 < $i12 goto i2 = 0
use:i1
add use:i1
use:$i12
add use:$i12
use:i1 < $i12
====currScanPre==0404=====return
**********************Line456
the value of param list:i0 i1 i2 $i3 $i4 $i5 i6 $i7 $i8 $i9 $i10 $i11 $i12 
***zy+++lastIdentityStmt is： r0 := @parameter0: int[];
localArray:[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
ok condVals14
currProStmt is IdentityStmt:r0 := @parameter0: int[]
IdentityStmt: isSenstiveflag false declaredName:bubbleSort
line 701 current stmt is: ----------#z0 = 0#----------------
isSenstiveflag true
 this method bubbleSort
units.insertBefore identity invokeUUIDLocalinvokeUUID := @parameter0: java.lang.String
units.insertBefore identity identitylinenoinvokeLineNo := @parameter1: long
 line632 current stmt is: ----------#z0 = 0#----------------
currDefVals:[z0]
currDefVals after retainAll:[]
currUseVals:[0]
currUseVals after retainAll:[]
r0: has been inited in original javafile!
20210603=z0
20210603=boolean
z0: init stmt will be inserted into jimplefile! :z0 = 0
20210603=i0
20210603=int
20210603=i0 = 0
i0: init stmt will be inserted into jimplefile! :i0 = 0
20210603=i1
20210603=int
20210603=i1 = 0
i1: init stmt will be inserted into jimplefile! :i1 = 0
20210603=i2
20210603=int
20210603=i2 = 0
i2: init stmt will be inserted into jimplefile! :i2 = 0
20210603=$i3
20210603=int
20210603=$i3 = 0
$i3: init stmt will be inserted into jimplefile! :$i3 = 0
20210603=$i4
20210603=int
20210603=$i4 = 0
$i4: init stmt will be inserted into jimplefile! :$i4 = 0
20210603=$i5
20210603=int
20210603=$i5 = 0
$i5: init stmt will be inserted into jimplefile! :$i5 = 0
20210603=i6
20210603=int
20210603=i6 = 0
i6: init stmt will be inserted into jimplefile! :i6 = 0
20210603=$i7
20210603=int
20210603=$i7 = 0
$i7: init stmt will be inserted into jimplefile! :$i7 = 0
20210603=$i8
20210603=int
20210603=$i8 = 0
$i8: init stmt will be inserted into jimplefile! :$i8 = 0
20210603=$i9
20210603=int
20210603=$i9 = 0
$i9: init stmt will be inserted into jimplefile! :$i9 = 0
20210603=$i10
20210603=int
20210603=$i10 = 0
$i10: init stmt will be inserted into jimplefile! :$i10 = 0
20210603=$i11
20210603=int
20210603=$i11 = 0
$i11: init stmt will be inserted into jimplefile! :$i11 = 0
20210603=$i12
20210603=int
20210603=$i12 = 0
$i12: init stmt will be inserted into jimplefile! :$i12 = 0
invokeLineNo: has been inited in original javafile!
20210603=getUUID
20210603=java.lang.String
20210603=getUUID = null
getUUID: init stmt will be inserted into jimplefile! :getUUID = null
invokeUUID: has been inited in original javafile!
20210603=branchInvokeResult
20210603=boolean
branchInvokeResult: init stmt will be inserted into jimplefile! :branchInvokeResult = 0
20210603=sgxInvoker
20210603=invoker.sgx_invoker
20210603=sgxInvoker = null
sgxInvoker: init stmt will be inserted into jimplefile! :sgxInvoker = null
2199 currStmt: z0 = 0
2204 stmt: sgxInvoker = new invoker.sgx_invoker
2206 currStmt: z0 = 0
ZYSTBLE condValsTypeArray:[13, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
ZYSTBLE 8.31:
ValueInitStmt is:#virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean initValueInEnclave(java.lang.String,java.lang.String,long)>(getUUID, invokeUUID, invokeLineNo)#--
currProStmt is AssignStmt: z0 = 0;
line 701 current stmt is: ----------#i0 = lengthof r0#----------------
 line632 current stmt is: ----------#i0 = lengthof r0#----------------
currDefVals:[i0]
currDefVals after retainAll:[i0]
currUseVals:[r0, lengthof r0]
currUseVals after retainAll:[r0]
currProStmt is AssignStmt: i0 = lengthof r0;
toBeHiddenDefValues:[i0]
enter replaceValueUpdateStmt:i0 = lengthof r0
ass r curr pro Unit: lengthof r0;
ass r curr pro Unit type: int;
ass l curr pro Unit: i0;
ass l curr pro Unit type: int;
=curr pro Unit: lengthof r0;
exp:********lengthof r0*************
JLengthExpr exp********lengthof r0*************
values:********lengthof r0*************
values.type:********int*************
********
rOpArr********false*************
+++++++tvaluei0 = lengthof r0
rightCondValue1: [r0]
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: [r0]
=leftOpValue.type==int
=leftOpValue==i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=0
return_index=100
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=lengthof r0
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :lengthof r0 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
[0527]=curr method is==i0 = lengthof r0 and rightop is:lengthof r0 Array isr0
use:r0
3 :call_0
indexwriter 3:
left_index:10000
left_flag_index:call_0
right_index:-1
right_flag_index:-1
return_index:100
return_flag_index:-1
counter:7
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 7L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i0 = lengthof r0++++++++++++++++++++++
line 701 current stmt is: ----------#i1 = 0#----------------
 line632 current stmt is: ----------#i1 = 0#----------------
currDefVals:[i1]
currDefVals after retainAll:[i1]
currUseVals:[0]
currUseVals after retainAll:[]
currProStmt is AssignStmt: i1 = 0;
toBeHiddenDefValues:[i1]
enter replaceValueUpdateStmt:i1 = 0
ass r curr pro Unit: 0;
ass r curr pro Unit type: int;
ass l curr pro Unit: i1;
ass l curr pro Unit type: int;
=curr pro Unit: 0;
exp:********0*************
Constant exp********0*************
values:********0*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=1
return_index=101
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=0
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :0 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
add: else :0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2869 not array
loc=i0
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i1
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i2
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i3
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i4
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i5
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i6
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i7
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i8
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i9
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i10
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i11
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i12
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
setParam0=false
!setParam0
2911 set left_index:int_0
indexwriter 3:
left_index:int_0
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:101
return_flag_index:-1
counter:8
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 8L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i1 = 0++++++++++++++++++++++
line 701 current stmt is: ----------#goto [?= $i12 = i0 - 1]#----------------
 line632 current stmt is: ----------#goto [?= $i12 = i0 - 1]#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[]
currUseVals after retainAll:[]
line 701 current stmt is: ----------#i2 = 0#----------------
 line632 current stmt is: ----------#i2 = 0#----------------
currDefVals:[i2]
currDefVals after retainAll:[i2]
currUseVals:[0]
currUseVals after retainAll:[]
currProStmt is AssignStmt: i2 = 0;
toBeHiddenDefValues:[i2]
enter replaceValueUpdateStmt:i2 = 0
ass r curr pro Unit: 0;
ass r curr pro Unit type: int;
ass l curr pro Unit: i2;
ass l curr pro Unit type: int;
=curr pro Unit: 0;
exp:********0*************
Constant exp********0*************
values:********0*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=2
return_index=102
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=0
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :0 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
add: else :0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2869 not array
loc=i0
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i1
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i2
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i3
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i4
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i5
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=i6
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i7
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i8
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i9
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i10
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i11
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
loc=$i12
localArray=[r0, z0, i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, invokeLineNo, getUUID, invokeUUID, branchInvokeResult, sgxInvoker]
setParam0=false
!setParam0
2911 set left_index:int_0
indexwriter 3:
left_index:int_0
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:102
return_flag_index:-1
counter:9
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i2 = 0++++++++++++++++++++++
line 701 current stmt is: ----------#goto [?= $i10 = i0 - 1]#----------------
 line632 current stmt is: ----------#goto [?= $i10 = i0 - 1]#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[]
currUseVals after retainAll:[]
line 701 current stmt is: ----------#$i3 = r0[i2]#----------------
 line632 current stmt is: ----------#$i3 = r0[i2]#----------------
currDefVals:[$i3]
currDefVals after retainAll:[$i3]
currUseVals:[r0, i2, r0[i2]]
currUseVals after retainAll:[r0, i2]
currProStmt is AssignStmt: $i3 = r0[i2];
toBeHiddenDefValues:[$i3]
enter replaceValueUpdateStmt:$i3 = r0[i2]
ass r curr pro Unit: r0[i2];
ass r curr pro Unit type: int;
ass l curr pro Unit: $i3;
ass l curr pro Unit type: int;
=curr pro Unit: r0[i2];
exp:********r0[i2]*************
ArrayRef:********r0[i2]*************
values:********r0[i2]*************
values.type:********int*************
********
rOpArr********true*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
+++++++tvalue$i3 = r0[i2]
+++++++tvalue$i3 = r0[i2]
rightCondValue1: [r0, i2]
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: [r0, i2]
=leftOpValue.type==int
=leftOpValue==$i3
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=3
return_index=103
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=r0[i2]
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :r0[i2] int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
???--> values.get(0) instanceof ArrayRef && TypeIndex(values.get(0))<=6 && TypeIndex(values.get(0)) != -1 :
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2752Indevalue:i2
2753pos_index:2
2754left_index102
indexwriter 3:
left_index:102
left_flag_index:call_0
right_index:-1
right_flag_index:-1
return_index:103
return_flag_index:-1
counter:10
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i3 = r0[i2]++++++++++++++++++++++
line 701 current stmt is: ----------#$i4 = i2 + 1#----------------
 line632 current stmt is: ----------#$i4 = i2 + 1#----------------
currDefVals:[$i4]
currDefVals after retainAll:[$i4]
currUseVals:[i2, 1, i2 + 1]
currUseVals after retainAll:[i2]
currProStmt is AssignStmt: $i4 = i2 + 1;
toBeHiddenDefValues:[$i4]
enter replaceValueUpdateStmt:$i4 = i2 + 1
ass r curr pro Unit: i2 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i4;
ass l curr pro Unit type: int;
=curr pro Unit: i2 + 1;
exp:********i2 + 1*************
exp:********i2*************
Local exp********i2*************
exp:********1*************
Constant exp********1*************
values:********i2*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==$i4
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=4
return_index=104
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i2
pos_index=2
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i2 pos_index ==: 2
-----------8.1------------
indexwriter 3:
left_index:102
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:104
return_flag_index:-1
counter:11
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 11L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i4 = i2 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#$i5 = r0[$i4]#----------------
 line632 current stmt is: ----------#$i5 = r0[$i4]#----------------
currDefVals:[$i5]
currDefVals after retainAll:[$i5]
currUseVals:[r0, $i4, r0[$i4]]
currUseVals after retainAll:[r0, $i4]
currProStmt is AssignStmt: $i5 = r0[$i4];
toBeHiddenDefValues:[$i5]
enter replaceValueUpdateStmt:$i5 = r0[$i4]
ass r curr pro Unit: r0[$i4];
ass r curr pro Unit type: int;
ass l curr pro Unit: $i5;
ass l curr pro Unit type: int;
=curr pro Unit: r0[$i4];
exp:********r0[$i4]*************
ArrayRef:********r0[$i4]*************
values:********r0[$i4]*************
values.type:********int*************
********
rOpArr********true*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
+++++++tvalue$i5 = r0[$i4]
+++++++tvalue$i5 = r0[$i4]
rightCondValue1: [r0, $i4]
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: [r0, $i4]
=leftOpValue.type==int
=leftOpValue==$i5
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=5
return_index=105
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=r0[$i4]
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :r0[$i4] int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
???--> values.get(0) instanceof ArrayRef && TypeIndex(values.get(0))<=6 && TypeIndex(values.get(0)) != -1 :
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2752Indevalue:$i4
2753pos_index:4
2754left_index104
indexwriter 3:
left_index:104
left_flag_index:call_0
right_index:-1
right_flag_index:-1
return_index:105
return_flag_index:-1
counter:12
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 12L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i5 = r0[$i4]++++++++++++++++++++++
line 701 current stmt is: ----------#if $i3 <= $i5 goto i2 = i2 + 1#----------------
 line632 current stmt is: ----------#if $i3 <= $i5 goto i2 = i2 + 1#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[$i3, $i5, $i3 <= $i5]
currUseVals after retainAll:[$i3, $i5]
the value=$i3
the value=$i5
the value if stmt:[$i3, $i5]
the method SourceList:[$i7, $i3, $i12, i1, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
 curr pro Unit: $i3 <= $i5;
exp:********$i3 <= $i5*************
exp:********$i3*************
Local exp********$i3*************
exp:********$i5*************
Local exp********$i5*************
operator:******** <= *************
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void clear()>()++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if $i3 <= $i5 goto i2 = i2 + 1++++++++++++++++++++++
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> tuple-0 branch: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values0 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====3
left_index is:====103
values1 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====5
right_index is:====105
left_index：====b==:103
right_index：===b===:105
operator：===b===:[ <= ]
re：===b===:-1
counter：===b===:13
assignStmt to insert is: ++++++++++++++++++++++++++ branchInvokeResult = virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean getBooleanValue(java.lang.String,long)>(getUUID, 13L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if branchInvokeResult == 1 goto i2 = i2 + 1++++++++++++++++++++++
currProStmt is IfStmt: if branchInvokeResult == 1 goto i2 = i2 + 1;
line 701 current stmt is: ----------#i6 = r0[i2]#----------------
 line632 current stmt is: ----------#i6 = r0[i2]#----------------
currDefVals:[i6]
currDefVals after retainAll:[i6]
currUseVals:[r0, i2, r0[i2]]
currUseVals after retainAll:[r0, i2]
currProStmt is AssignStmt: i6 = r0[i2];
toBeHiddenDefValues:[i6]
enter replaceValueUpdateStmt:i6 = r0[i2]
ass r curr pro Unit: r0[i2];
ass r curr pro Unit type: int;
ass l curr pro Unit: i6;
ass l curr pro Unit type: int;
=curr pro Unit: r0[i2];
exp:********r0[i2]*************
ArrayRef:********r0[i2]*************
values:********r0[i2]*************
values.type:********int*************
********
rOpArr********true*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
+++++++tvaluei6 = r0[i2]
+++++++tvaluei6 = r0[i2]
rightCondValue1: [r0, i2]
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: [r0, i2]
=leftOpValue.type==int
=leftOpValue==i6
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=6
return_index=106
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=r0[i2]
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :r0[i2] int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
???--> values.get(0) instanceof ArrayRef && TypeIndex(values.get(0))<=6 && TypeIndex(values.get(0)) != -1 :
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2752Indevalue:i2
2753pos_index:2
2754left_index102
indexwriter 3:
left_index:102
left_flag_index:call_0
right_index:-1
right_flag_index:-1
return_index:106
return_flag_index:-1
counter:14
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 14L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i6 = r0[i2]++++++++++++++++++++++
line 701 current stmt is: ----------#$i7 = i2 + 1#----------------
 line632 current stmt is: ----------#$i7 = i2 + 1#----------------
currDefVals:[$i7]
currDefVals after retainAll:[$i7]
currUseVals:[i2, 1, i2 + 1]
currUseVals after retainAll:[i2]
currProStmt is AssignStmt: $i7 = i2 + 1;
toBeHiddenDefValues:[$i7]
enter replaceValueUpdateStmt:$i7 = i2 + 1
ass r curr pro Unit: i2 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i7;
ass l curr pro Unit type: int;
=curr pro Unit: i2 + 1;
exp:********i2 + 1*************
exp:********i2*************
Local exp********i2*************
exp:********1*************
Constant exp********1*************
values:********i2*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==$i7
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=7
return_index=107
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i2
pos_index=2
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i2 pos_index ==: 2
-----------8.1------------
indexwriter 3:
left_index:102
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:107
return_flag_index:-1
counter:15
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 15L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i7 = i2 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#$i8 = r0[$i7]#----------------
 line632 current stmt is: ----------#$i8 = r0[$i7]#----------------
currDefVals:[$i8]
currDefVals after retainAll:[$i8]
currUseVals:[r0, $i7, r0[$i7]]
currUseVals after retainAll:[r0, $i7]
currProStmt is AssignStmt: $i8 = r0[$i7];
toBeHiddenDefValues:[$i8]
enter replaceValueUpdateStmt:$i8 = r0[$i7]
ass r curr pro Unit: r0[$i7];
ass r curr pro Unit type: int;
ass l curr pro Unit: $i8;
ass l curr pro Unit type: int;
=curr pro Unit: r0[$i7];
exp:********r0[$i7]*************
ArrayRef:********r0[$i7]*************
values:********r0[$i7]*************
values.type:********int*************
********
rOpArr********true*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int[]*************
+++++++tvalue$i8 = r0[$i7]
+++++++tvalue$i8 = r0[$i7]
rightCondValue1: [r0, $i7]
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: [r0, $i7]
=leftOpValue.type==int
=leftOpValue==$i8
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=8
return_index=108
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=r0[$i7]
pos_index=-1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :r0[$i7] int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
???--> values.get(0) instanceof ArrayRef && TypeIndex(values.get(0))<=6 && TypeIndex(values.get(0)) != -1 :
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
2752Indevalue:$i7
2753pos_index:7
2754left_index107
indexwriter 3:
left_index:107
left_flag_index:call_0
right_index:-1
right_flag_index:-1
return_index:108
return_flag_index:-1
counter:16
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 16L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i8 = r0[$i7]++++++++++++++++++++++
line 701 current stmt is: ----------#r0[i2] = $i8#----------------
 line632 current stmt is: ----------#r0[i2] = $i8#----------------
currDefVals:[r0, r0[i2]]
currDefVals after retainAll:[r0]
currUseVals:[r0, i2, $i8]
currUseVals after retainAll:[r0, i2, $i8]
currProStmt is AssignStmt: r0[i2] = $i8;
toBeHiddenDefValues:[r0]
enter replaceValueUpdateStmt:r0[i2] = $i8
ass r curr pro Unit: $i8;
ass r curr pro Unit type: int;
ass l curr pro Unit: r0[i2];
ass l curr pro Unit type: int;
=curr pro Unit: $i8;
exp:********$i8*************
Local exp********$i8*************
values:********$i8*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==r0[i2]
A
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
210628Indevalue:i2
210628pos_index:2
210628left_index-1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=$i8
pos_index=8
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :$i8 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
int or float flag
values.get(0):$i8
pos_index:8
2814 set left_index108
indexwriter 3:
left_index:108
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:102
return_flag_index:call_0
counter:17
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 17L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ r0[i2] = $i8++++++++++++++++++++++
line 701 current stmt is: ----------#$i9 = i2 + 1#----------------
 line632 current stmt is: ----------#$i9 = i2 + 1#----------------
currDefVals:[$i9]
currDefVals after retainAll:[$i9]
currUseVals:[i2, 1, i2 + 1]
currUseVals after retainAll:[i2]
currProStmt is AssignStmt: $i9 = i2 + 1;
toBeHiddenDefValues:[$i9]
enter replaceValueUpdateStmt:$i9 = i2 + 1
ass r curr pro Unit: i2 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i9;
ass l curr pro Unit type: int;
=curr pro Unit: i2 + 1;
exp:********i2 + 1*************
exp:********i2*************
Local exp********i2*************
exp:********1*************
Constant exp********1*************
values:********i2*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==$i9
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=9
return_index=109
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i2
pos_index=2
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i2 pos_index ==: 2
-----------8.1------------
indexwriter 3:
left_index:102
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:109
return_flag_index:-1
counter:18
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 18L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i9 = i2 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#r0[$i9] = i6#----------------
 line632 current stmt is: ----------#r0[$i9] = i6#----------------
currDefVals:[r0, r0[$i9]]
currDefVals after retainAll:[r0]
currUseVals:[r0, $i9, i6]
currUseVals after retainAll:[r0, $i9, i6]
currProStmt is AssignStmt: r0[$i9] = i6;
toBeHiddenDefValues:[r0]
enter replaceValueUpdateStmt:r0[$i9] = i6
ass r curr pro Unit: i6;
ass r curr pro Unit type: int;
ass l curr pro Unit: r0[$i9];
ass l curr pro Unit type: int;
=curr pro Unit: i6;
exp:********i6*************
Local exp********i6*************
values:********i6*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
=leftOpValue.type==int
=leftOpValue==r0[$i9]
A
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
210628Indevalue:$i9
210628pos_index:9
210628left_index-1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i6
pos_index=6
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=1
0515 :i6 int
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
int or float flag
values.get(0):i6
pos_index:6
2814 set left_index106
indexwriter 3:
left_index:106
left_flag_index:-1
right_index:-1
right_flag_index:-1
return_index:109
return_flag_index:call_0
counter:19
stmt update has no second operand:********-1*************
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 19L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ r0[$i9] = i6++++++++++++++++++++++
line 701 current stmt is: ----------#i2 = i2 + 1#----------------
 line632 current stmt is: ----------#i2 = i2 + 1#----------------
currDefVals:[i2]
currDefVals after retainAll:[i2]
currUseVals:[i2, 1, i2 + 1]
currUseVals after retainAll:[i2]
currProStmt is AssignStmt: i2 = i2 + 1;
toBeHiddenDefValues:[i2]
enter replaceValueUpdateStmt:i2 = i2 + 1
ass r curr pro Unit: i2 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: i2;
ass l curr pro Unit type: int;
=curr pro Unit: i2 + 1;
exp:********i2 + 1*************
exp:********i2*************
Local exp********i2*************
exp:********1*************
Constant exp********1*************
values:********i2*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=2
return_index=102
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i2
pos_index=2
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i2
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i2 pos_index ==: 2
-----------8.1------------
indexwriter 3:
left_index:102
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:102
return_flag_index:-1
counter:20
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 20L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i2 = i2 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#$i10 = i0 - 1#----------------
 line632 current stmt is: ----------#$i10 = i0 - 1#----------------
currDefVals:[$i10]
currDefVals after retainAll:[$i10]
currUseVals:[i0, 1, i0 - 1]
currUseVals after retainAll:[i0]
currProStmt is AssignStmt: $i10 = i0 - 1;
toBeHiddenDefValues:[$i10]
enter replaceValueUpdateStmt:$i10 = i0 - 1
ass r curr pro Unit: i0 - 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i10;
ass l curr pro Unit type: int;
=curr pro Unit: i0 - 1;
exp:********i0 - 1*************
exp:********i0*************
Local exp********i0*************
exp:********1*************
Constant exp********1*************
values:********i0*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** - *************
=leftOpValue.type==int
=leftOpValue==$i10
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=10
return_index=110
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i0
pos_index=0
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i0 pos_index ==: 0
-----------8.1------------
indexwriter 3:
left_index:100
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:110
return_flag_index:-1
counter:21
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 21L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i10 = i0 - 1++++++++++++++++++++++
line 701 current stmt is: ----------#$i11 = $i10 - i1#----------------
 line632 current stmt is: ----------#$i11 = $i10 - i1#----------------
currDefVals:[$i11]
currDefVals after retainAll:[$i11]
currUseVals:[$i10, i1, $i10 - i1]
currUseVals after retainAll:[$i10, i1]
currProStmt is AssignStmt: $i11 = $i10 - i1;
toBeHiddenDefValues:[$i11]
enter replaceValueUpdateStmt:$i11 = $i10 - i1
ass r curr pro Unit: $i10 - i1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i11;
ass l curr pro Unit type: int;
=curr pro Unit: $i10 - i1;
exp:********$i10 - i1*************
exp:********$i10*************
Local exp********$i10*************
exp:********i1*************
Local exp********i1*************
values:********$i10*************
values.type:********int*************
values:********i1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** - *************
=leftOpValue.type==int
=leftOpValue==$i11
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=11
return_index=111
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=$i10
pos_index=10
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++$i10
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
$i10 pos_index ==: 10
values1 is cond val++++++++++++++i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
-----------8.1------------
indexwriter 3:
left_index:110
left_flag_index:-1
right_index:101
right_flag_index:-1
return_index:111
return_flag_index:-1
counter:22
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 22L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i11 = $i10 - i1++++++++++++++++++++++
line 701 current stmt is: ----------#if i2 < $i11 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L)#----------------
 line632 current stmt is: ----------#if i2 < $i11 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L)#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[i2, $i11, i2 < $i11]
currUseVals after retainAll:[i2, $i11]
the value=i2
the value=$i11
the value if stmt:[i2, $i11]
the method SourceList:[$i7, $i3, $i12, i1, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
 curr pro Unit: i2 < $i11;
exp:********i2 < $i11*************
exp:********i2*************
Local exp********i2*************
exp:********$i11*************
Local exp********$i11*************
operator:******** < *************
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void clear()>()++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if i2 < $i11 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L)++++++++++++++++++++++
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> tuple-0 branch: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values0 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====2
left_index is:====102
values1 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====11
right_index is:====111
left_index：====b==:102
right_index：===b===:111
operator：===b===:[ < ]
re：===b===:-1
counter：===b===:23
assignStmt to insert is: ++++++++++++++++++++++++++ branchInvokeResult = virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean getBooleanValue(java.lang.String,long)>(getUUID, 23L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if branchInvokeResult == 1 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L)++++++++++++++++++++++
currProStmt is IfStmt: if branchInvokeResult == 1 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 10L);
line 701 current stmt is: ----------#i1 = i1 + 1#----------------
 line632 current stmt is: ----------#i1 = i1 + 1#----------------
currDefVals:[i1]
currDefVals after retainAll:[i1]
currUseVals:[i1, 1, i1 + 1]
currUseVals after retainAll:[i1]
currProStmt is AssignStmt: i1 = i1 + 1;
toBeHiddenDefValues:[i1]
enter replaceValueUpdateStmt:i1 = i1 + 1
ass r curr pro Unit: i1 + 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: i1;
ass l curr pro Unit type: int;
=curr pro Unit: i1 + 1;
exp:********i1 + 1*************
exp:********i1*************
Local exp********i1*************
exp:********1*************
Constant exp********1*************
values:********i1*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** + *************
=leftOpValue.type==int
=leftOpValue==i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=1
return_index=101
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i1
pos_index=1
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i1
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i1 pos_index ==: 1
-----------8.1------------
indexwriter 3:
left_index:101
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:101
return_flag_index:-1
counter:24
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 24L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ i1 = i1 + 1++++++++++++++++++++++
line 701 current stmt is: ----------#$i12 = i0 - 1#----------------
 line632 current stmt is: ----------#$i12 = i0 - 1#----------------
currDefVals:[$i12]
currDefVals after retainAll:[$i12]
currUseVals:[i0, 1, i0 - 1]
currUseVals after retainAll:[i0]
currProStmt is AssignStmt: $i12 = i0 - 1;
toBeHiddenDefValues:[$i12]
enter replaceValueUpdateStmt:$i12 = i0 - 1
ass r curr pro Unit: i0 - 1;
ass r curr pro Unit type: int;
ass l curr pro Unit: $i12;
ass l curr pro Unit type: int;
=curr pro Unit: i0 - 1;
exp:********i0 - 1*************
exp:********i0*************
Local exp********i0*************
exp:********1*************
Constant exp********1*************
values:********i0*************
values.type:********int*************
values:********1*************
values.type:********int*************
********
rOpArr********false*************
rightCondValue1: []
condVals: [i0, r0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, r0]
rightCondValue2: []
operator:******** - *************
=leftOpValue.type==int
=leftOpValue==$i12
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
returnTypeIndex=1
pos_index=12
return_index=112
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
values.get(0)=i0
pos_index=0
<<<<<<ZYSTBLE>>>>>> tuple-0 update: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values.size=2
!!!!!enter values.size()==2!!!!!!!!!
values0 is cond val++++++++++++++i0
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
i0 pos_index ==: 0
-----------8.1------------
indexwriter 3:
left_index:100
left_flag_index:-1
right_index:int_1
right_flag_index:-1
return_index:112
return_flag_index:-1
counter:25
1111222111
1111555111
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 25L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ $i12 = i0 - 1++++++++++++++++++++++
line 701 current stmt is: ----------#if i1 < $i12 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L)#----------------
 line632 current stmt is: ----------#if i1 < $i12 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L)#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[i1, $i12, i1 < $i12]
currUseVals after retainAll:[i1, $i12]
the value=i1
the value=$i12
the value if stmt:[i1, $i12]
the method SourceList:[$i7, $i3, $i12, i1, i2, $i8, $i10, $i4, r0, $i11, i0, $i5, i6, $i9]
 curr pro Unit: i1 < $i12;
exp:********i1 < $i12*************
exp:********i1*************
Local exp********i1*************
exp:********$i12*************
Local exp********$i12*************
operator:******** < *************
newInvokeStmt to insert is: ++++++++++++++++++++++++++ virtualinvoke sgxInvoker.<invoker.sgx_invoker: void clear()>()++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if i1 < $i12 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L)++++++++++++++++++++++
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
<<<<<<ZYSTBLE>>>>>> tuple-0 branch: ++++++++++++++++++++++++++ 1++++++++++++++++++++++
values0 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====1
left_index is:====101
values1 is in condvals!
<<<<<<ZYSTBLE>>>>>> in Function TypeIndex typeStr:********int*************
val_type is:====1
pos_index is:====12
right_index is:====112
left_index：====b==:101
right_index：===b===:112
operator：===b===:[ < ]
re：===b===:-1
counter：===b===:26
assignStmt to insert is: ++++++++++++++++++++++++++ branchInvokeResult = virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean getBooleanValue(java.lang.String,long)>(getUUID, 26L)++++++++++++++++++++++
start insert before currStmt: ++++++++++++++++++++++++++ if branchInvokeResult == 1 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L)++++++++++++++++++++++
currProStmt is IfStmt: if branchInvokeResult == 1 goto virtualinvoke sgxInvoker.<invoker.sgx_invoker: void updateValueInEnclave(java.lang.String,int,long)>(getUUID, 0, 9L);
line 701 current stmt is: ----------#return#----------------
 line632 current stmt is: ----------#return#----------------
currDefVals:[]
currDefVals after retainAll:[]
currUseVals:[]
currUseVals after retainAll:[]
currProStmt return stmt before deleteValuestmt: return
<<!!!!!!ZYreturn!!!!!!>>this processing function: <test.Sort_Bubble: void bubbleSort(java.lang.String,long)>;
A
C2
B
ValueDeleteStmt is:#virtualinvoke sgxInvoker.<invoker.sgx_invoker: boolean deleteValueInEnclave(java.lang.String,java.lang.String,long)>(getUUID, "", 0L)#--
***++++++lastIdentityStmt is:++++++++++invokeLineNo := @parameter1: long
Writing to replaceOutput/invoker/sgx_invoker.class
Writing to replaceOutput/test/Sort_Bubble.class
Soot finished on Fri Jul 30 16:05:34 CST 2021
Soot has run for 0 min. 24 sec.
